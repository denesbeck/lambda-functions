name: Deploy Lambda Functions

on:
  workflow_run:
    workflows: ["Deploy Lambda Layers"]
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      S3_BUCKET: ${{ vars.FUNCTIONS_S3_BUCKET }}
      REGION: ${{ vars.REGION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.REGION }}

      - name: Get Lambda directories
        id: function_dirs
        run: |
          echo "Detecting changed Lambda directories..."
          BEFORE=${{ github.event.before }}
          AFTER=${{ github.event.after }}

          if git cat-file -e "$BEFORE"^{commit} &>/dev/null; then
            echo "Commit $BEFORE found."
            DIRS=$(git diff --name-only "$BEFORE" "$AFTER" | awk -F/ '$1 == "functions" && NF>=3 && $1 !~ /^\./ && $2 !~ /^\./ && $3 !~ /^\./ {print $1 "/" $2 "/" $3}' | sort -u)
          else
            echo "Commit $BEFORE NOT found. First commit."
            DIRS=$(find . -mindepth 3 -maxdepth 3 -type d -not -path '*/.*' | cut -c 3- | sort -u | awk -F/ '$1 == "functions"')
          fi

          if [[ -z "$DIRS" ]]; then
            echo "No changed Lambda directories found. Skipping deployment."
          else
            echo "Changed Lambda directories:"
            echo "$DIRS"
            echo "dirs<<EOF" >> $GITHUB_OUTPUT
            echo "$DIRS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Zip, upload to S3, and deploy Lambda
        if: steps.function_dirs.outputs.dirs != ''
        run: |
          set -euo pipefail

          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          COMMIT_SHA=${{ github.sha }}
          BRANCH="${{ github.ref_name }}"

          DEPLOY_ALIAS=$(./scripts/get-alias.sh "$BRANCH")
          echo "Branch '$BRANCH' will deploy to alias: $DEPLOY_ALIAS"

          while IFS= read -r path; do
            echo "Processing $path..."

            APP=$(echo "$path" | cut -d'/' -f2)
            LAMBDA=$(echo "$path" | cut -d'/' -f3)
            FUNCTION_NAME="${APP}-${LAMBDA}"

            CONFIG_FILE="${path}/config.json"
            if [[ ! -f "$CONFIG_FILE" ]]; then
              echo "Missing config.json in $path, skipping..."
              continue
            fi

            RUNTIME=$(jq -r .runtime "$CONFIG_FILE")
            HANDLER=$(jq -r .handler "$CONFIG_FILE")
            IAM_ROLE_ARN=$(jq -r .role "$CONFIG_FILE")
            LAYERS=$(jq -r '.layers | join(" ")' "$CONFIG_FILE")

            ZIP_FILE="${FUNCTION_NAME}-${TIMESTAMP}-${COMMIT_SHA}.zip"
            S3_KEY="${APP}/${LAMBDA}/${ZIP_FILE}"

            echo "Zipping $path to $ZIP_FILE"
            cd "$path"
            zip -r "../../../$ZIP_FILE" . > /dev/null
            cd - > /dev/null

            echo "Uploading to s3://${S3_BUCKET}/${S3_KEY}"
            aws s3 cp "$ZIP_FILE" "s3://${S3_BUCKET}/${S3_KEY}"

            echo "Checking if Lambda function ${FUNCTION_NAME} exists..."
            if aws lambda get-function --function-name "$FUNCTION_NAME" --region "$REGION" >/dev/null 2>&1; then
              echo "Updating Lambda ${FUNCTION_NAME}..."
              aws lambda update-function-code \
                --function-name "$FUNCTION_NAME" \
                --s3-bucket "$S3_BUCKET" \
                --s3-key "$S3_KEY" \
                --region "$REGION"
            else
              echo "Creating Lambda ${FUNCTION_NAME}..."
              aws lambda create-function \
                --function-name "$FUNCTION_NAME" \
                --runtime "$RUNTIME" \
                --role "$IAM_ROLE_ARN" \
                --handler "$HANDLER" \
                --code S3Bucket="$S3_BUCKET",S3Key="$S3_KEY" \
                --region "$REGION"
            fi

            echo "Updating layers for ${FUNCTION_NAME}..."
            aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --layers $LAYERS

            # Wait for function update to finish
            aws lambda wait function-updated \
              --function-name "$FUNCTION_NAME" \
              --region "$REGION"

            echo "Publishing new version for ${FUNCTION_NAME}..."
            VERSION=$(aws lambda publish-version \
              --function-name "$FUNCTION_NAME" \
              --region "$REGION" \
              --output text \
              --query 'Version')

            echo "Published version $VERSION"

            echo "Updating or creating alias '$DEPLOY_ALIAS'..."
            aws lambda update-alias \
              --function-name "$FUNCTION_NAME" \
              --name "$DEPLOY_ALIAS" \
              --function-version "$VERSION" \
              --region "$REGION" || \
            aws lambda create-alias \
              --function-name "$FUNCTION_NAME" \
              --name "$DEPLOY_ALIAS" \
              --function-version "$VERSION" \
              --region "$REGION"

            echo "Cleaning up..."
            rm "$ZIP_FILE"

          done <<< "${{ steps.function_dirs.outputs.dirs }}"
